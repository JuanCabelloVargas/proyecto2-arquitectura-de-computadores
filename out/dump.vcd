$date
	Tue Sep 30 22:50:32 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module test $end
$var wire 8 ! regA_out [7:0] $end
$var wire 8 " regB_out [7:0] $end
$var reg 1 # add_test_failed $end
$var reg 1 $ clk $end
$var reg 1 % mov_test_failed $end
$var reg 1 & shl_test_failed $end
$scope module Comp $end
$var wire 1 $ clk $end
$var wire 8 ' wb_data [7:0] $end
$var wire 1 ( wbSel $end
$var wire 4 ) status [3:0] $end
$var wire 2 * selData [1:0] $end
$var wire 2 + selB [1:0] $end
$var wire 2 , selA [1:0] $end
$var wire 8 - regB_out_bus [7:0] $end
$var wire 8 . regA_out_bus [7:0] $end
$var wire 8 / pc_out_bus [7:0] $end
$var wire 7 0 opcode [6:0] $end
$var wire 1 1 mem_we $end
$var wire 15 2 im_out_bus [14:0] $end
$var wire 8 3 dmem_out [7:0] $end
$var wire 8 4 dmem_addr [7:0] $end
$var wire 8 5 alu_out_bus [7:0] $end
$var wire 4 6 alu_op [3:0] $end
$var wire 8 7 alu_b_bus [7:0] $end
$var wire 8 8 alu_a_bus [7:0] $end
$var wire 1 9 Z $end
$var wire 1 : V $end
$var wire 1 ; N $end
$var wire 1 < LP $end
$var wire 1 = LB $end
$var wire 1 > LA $end
$var wire 8 ? K [7:0] $end
$var wire 1 @ C $end
$scope module ALU $end
$var wire 8 A out [7:0] $end
$var wire 9 B sum [8:0] $end
$var wire 4 C s [3:0] $end
$var wire 9 D diff [8:0] $end
$var wire 8 E b [7:0] $end
$var wire 8 F a [7:0] $end
$var wire 1 9 Z $end
$var wire 1 : V $end
$var wire 1 ; N $end
$var wire 1 @ C $end
$var reg 1 @ C_r $end
$var reg 1 : V_r $end
$var reg 8 G out_r [7:0] $end
$upscope $end
$scope module CU $end
$var wire 7 H opcode [6:0] $end
$var wire 4 I status [3:0] $end
$var reg 1 > LA $end
$var reg 1 = LB $end
$var reg 1 < LP $end
$var reg 4 J alu_op [3:0] $end
$var reg 1 1 mem_we $end
$var reg 2 K selA [1:0] $end
$var reg 2 L selB [1:0] $end
$var reg 2 M selData [1:0] $end
$var reg 1 ( wbSel $end
$upscope $end
$scope module DM $end
$var wire 1 1 W $end
$var wire 1 $ clk $end
$var wire 8 N data_out [7:0] $end
$var wire 8 O data_in [7:0] $end
$var wire 8 P address [7:0] $end
$upscope $end
$scope module IM $end
$var wire 15 Q out [14:0] $end
$var wire 8 R address [7:0] $end
$var integer 32 S i [31:0] $end
$upscope $end
$scope module MUXD $end
$var wire 8 T K [7:0] $end
$var wire 2 U sel [1:0] $end
$var wire 8 V PC [7:0] $end
$var wire 8 W B [7:0] $end
$var wire 8 X A [7:0] $end
$var reg 8 Y out [7:0] $end
$upscope $end
$scope module PC $end
$var wire 1 $ clk $end
$var reg 8 Z pc [7:0] $end
$upscope $end
$scope module muxA $end
$var wire 8 [ K_unused [7:0] $end
$var wire 2 \ sel [1:0] $end
$var wire 8 ] B [7:0] $end
$var wire 8 ^ A [7:0] $end
$var reg 8 _ out [7:0] $end
$upscope $end
$scope module muxB $end
$var wire 8 ` K [7:0] $end
$var wire 2 a sel [1:0] $end
$var wire 8 b B [7:0] $end
$var wire 8 c A [7:0] $end
$var reg 8 d out [7:0] $end
$upscope $end
$scope module muxWB $end
$var wire 8 e alu_out [7:0] $end
$var wire 8 f mem_out [7:0] $end
$var wire 1 ( sel $end
$var wire 8 g out [7:0] $end
$upscope $end
$scope module regA $end
$var wire 1 $ clk $end
$var wire 8 h data [7:0] $end
$var wire 1 > load $end
$var reg 8 i out [7:0] $end
$upscope $end
$scope module regB $end
$var wire 1 $ clk $end
$var wire 8 j data [7:0] $end
$var wire 1 = load $end
$var reg 8 k out [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 k
b101010 j
b0 i
b101010 h
b101010 g
b0 f
b101010 e
b101010 d
b0 c
b0 b
b10 a
b101010 `
b0 _
b0 ^
b0 ]
b10 \
b0 [
b0 Z
b0 Y
b0 X
b0 W
b0 V
b0 U
b101010 T
b100000000 S
b0 R
b1000101010 Q
b0 P
b0 O
b0 N
b0 M
b10 L
b10 K
b0 J
b0 I
b10 H
b101010 G
b0 F
b101010 E
b11010110 D
b0 C
b101010 B
b101010 A
0@
b101010 ?
1>
0=
0<
0;
0:
09
b0 8
b101010 7
b0 6
b101010 5
b0 4
b0 3
b1000101010 2
01
b10 0
b0 /
b0 .
b0 -
b10 ,
b10 +
b0 *
b0 )
0(
b101010 '
0&
0%
0$
0#
b0 "
b0 !
$end
#1
b1111011 '
b1111011 g
b1111011 h
b1111011 j
b10000101 D
b1111011 5
b1111011 A
b1111011 e
b1111011 G
b1111011 B
b1111011 7
b1111011 E
b1111011 d
1=
b10 +
b10 L
b10 a
b10 ,
b10 K
b10 \
0>
b1111011 ?
b1111011 T
b1111011 `
b11 0
b11 H
b1101111011 2
b1101111011 Q
b1 /
b1 R
b1 V
b1 Z
b101010 !
b101010 .
b101010 X
b101010 ^
b101010 c
b101010 i
1$
#2
0$
#3
b10 '
b10 g
b10 h
b10 j
b11111110 D
b10 5
b10 A
b10 e
b10 G
1>
b10 +
b10 L
b10 a
b10 ,
b10 K
b10 \
0=
bx 3
bx N
bx f
b1111011 4
b1111011 P
b1111011 Y
b10 B
b10 7
b10 E
b10 d
b10 ?
b10 T
b10 `
b10 0
b10 H
b1111011 "
b1111011 -
b1111011 O
b1111011 W
b1111011 ]
b1111011 b
b1111011 k
b1000000010 2
b1000000010 Q
b10 /
b10 R
b10 V
b10 Z
1$
#4
0$
#5
b11 '
b11 g
b11 h
b11 j
b11111101 D
b11 5
b11 A
b11 e
b11 G
b11 B
b11 7
b11 E
b11 d
1=
b10 +
b10 L
b10 a
b10 ,
b10 K
b10 \
0>
b11 ?
b11 T
b11 `
b11 0
b11 H
b1100000011 2
b1100000011 Q
b11 /
b11 R
b11 V
b11 Z
b10 !
b10 .
b10 X
b10 ^
b10 c
b10 i
1$
#6
0$
#7
b101 '
b101 g
b101 h
b101 j
b10 8
b10 F
b10 _
b11111111 D
b0 )
b0 I
09
b101 5
b101 A
b101 e
b101 G
1>
b0 +
b0 L
b0 a
b0 ,
b0 K
b0 \
0=
b0 3
b0 N
b0 f
b11 4
b11 P
b11 Y
b101 B
b11 7
b11 E
b11 d
b0 ?
b0 T
b0 `
b100 0
b100 H
b11 "
b11 -
b11 O
b11 W
b11 ]
b11 b
b11 k
b10000000000 2
b10000000000 Q
b100 /
b100 R
b100 V
b100 Z
1$
#8
0$
#9
b101 '
b101 g
b101 h
b101 j
b101 7
b101 E
b101 d
b10 +
b10 L
b10 a
b10 ,
b10 K
b10 \
1>
b101 5
b101 A
b101 e
b101 G
b101 ?
b101 T
b101 `
b10 0
b10 H
b11111011 D
b101 B
b0 8
b0 F
b0 _
b1000000101 2
b1000000101 Q
b101 /
b101 R
b101 V
b101 Z
b101 !
b101 .
b101 X
b101 ^
b101 c
b101 i
1$
#10
0$
#11
b1010 '
b1010 g
b1010 h
b1010 j
b1010 5
b1010 A
b1010 e
b1010 G
b100000010 D
b101 8
b101 F
b101 _
b1000 B
b11 7
b11 E
b11 d
b111 6
b111 C
b111 J
b0 +
b0 L
b0 a
b0 ,
b0 K
b0 \
1>
b0 ?
b0 T
b0 `
b11100 0
b11100 H
b1110000000000 2
b1110000000000 Q
b110 /
b110 R
b110 V
b110 Z
1$
#12
0$
#13
b11 '
b11 g
b11 h
b11 j
b10 ,
b10 K
b10 \
b0 6
b0 C
b0 J
1>
b11 5
b11 A
b11 e
b11 G
b0 0
b0 H
b11111101 D
b11 B
b0 8
b0 F
b0 _
b0 2
b0 Q
b111 /
b111 R
b111 V
b111 Z
b1010 !
b1010 .
b1010 X
b1010 ^
b1010 c
b1010 i
1$
#14
0$
#15
b11 !
b11 .
b11 X
b11 ^
b11 c
b11 i
b1000 /
b1000 R
b1000 V
b1000 Z
1$
#16
0$
#17
b1001 /
b1001 R
b1001 V
b1001 Z
1$
