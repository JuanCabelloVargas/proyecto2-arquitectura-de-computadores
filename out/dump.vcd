$date
	Tue Sep 30 18:52:00 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module test $end
$var wire 8 ! regA_out [7:0] $end
$var wire 8 " regB_out [7:0] $end
$var reg 1 # add_test_failed $end
$var reg 1 $ clk $end
$var reg 1 % mov_test_failed $end
$var reg 1 & shl_test_failed $end
$scope module Comp $end
$var wire 1 $ clk $end
$var wire 2 ' selB [1:0] $end
$var wire 2 ( selA [1:0] $end
$var wire 8 ) regB_out_bus [7:0] $end
$var wire 8 * regA_out_bus [7:0] $end
$var wire 8 + pc_out_bus [7:0] $end
$var wire 7 , opcode [6:0] $end
$var wire 16 - im_out_bus [15:0] $end
$var wire 8 . alu_out_bus [7:0] $end
$var wire 4 / alu_op [3:0] $end
$var wire 8 0 alu_b_bus [7:0] $end
$var wire 8 1 alu_a_bus [7:0] $end
$var wire 1 2 LB $end
$var wire 1 3 LA $end
$var wire 8 4 K [7:0] $end
$scope module ALU $end
$var wire 1 5 C $end
$var wire 1 6 V $end
$var wire 8 7 out [7:0] $end
$var wire 9 8 sum [8:0] $end
$var wire 4 9 s [3:0] $end
$var wire 9 : diff [8:0] $end
$var wire 8 ; b [7:0] $end
$var wire 8 < a [7:0] $end
$var wire 1 = Z $end
$var wire 1 > N $end
$var reg 1 ? C_r $end
$var reg 1 @ V_r $end
$var reg 8 A out_r [7:0] $end
$upscope $end
$scope module CU $end
$var wire 7 B opcode [6:0] $end
$var reg 1 3 LA $end
$var reg 1 2 LB $end
$var reg 4 C alu_op [3:0] $end
$var reg 2 D selA [1:0] $end
$var reg 2 E selB [1:0] $end
$upscope $end
$scope module IM $end
$var wire 16 F out [15:0] $end
$var wire 8 G address [7:0] $end
$upscope $end
$scope module PC $end
$var wire 1 $ clk $end
$var reg 8 H pc [7:0] $end
$upscope $end
$scope module muxA $end
$var wire 8 I K_unused [7:0] $end
$var wire 2 J sel [1:0] $end
$var wire 8 K B [7:0] $end
$var wire 8 L A [7:0] $end
$var reg 8 M out [7:0] $end
$upscope $end
$scope module muxB $end
$var wire 8 N K [7:0] $end
$var wire 2 O sel [1:0] $end
$var wire 8 P B [7:0] $end
$var wire 8 Q A [7:0] $end
$var reg 8 R out [7:0] $end
$upscope $end
$scope module regA $end
$var wire 1 $ clk $end
$var wire 8 S data [7:0] $end
$var wire 1 3 load $end
$var reg 8 T out [7:0] $end
$upscope $end
$scope module regB $end
$var wire 1 $ clk $end
$var wire 8 U data [7:0] $end
$var wire 1 2 load $end
$var reg 8 V out [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b0 V
b0 U
b0 T
b0 S
b0 R
b0 Q
b0 P
b1 O
b1111011 N
b0 M
b0 L
b0 K
b10 J
b0 I
b1 H
b1 G
b1101111011 F
b1 E
b10 D
b0 C
b1 B
b0 A
0@
0?
0>
1=
b0 <
b0 ;
b100000000 :
b0 9
b0 8
b0 7
06
05
b1111011 4
03
12
b0 1
b0 0
b0 /
b0 .
b1101111011 -
b1 ,
b1 +
b0 *
b0 )
b10 (
b1 '
0&
0%
0$
0#
b0 "
b0 !
$end
#1
1$
#2
b10 4
b10 N
b1000000010 -
b1000000010 F
b10 +
b10 G
b10 H
0$
#3
1$
1%
#4
b11 4
b11 N
b1100000011 -
b1100000011 F
b11 +
b11 G
b11 H
0$
#5
1$
#6
13
b10 '
b10 E
b10 O
b10 (
b10 D
b10 J
02
b0 4
b0 N
b10 ,
b10 B
b10000000000 -
b10000000000 F
b100 +
b100 G
b100 H
0$
#7
1$
1#
#8
12
b1 '
b1 E
b1 O
b10 (
b10 D
b10 J
03
b101 4
b101 N
b1 ,
b1 B
b1000000101 -
b1000000101 F
b101 +
b101 G
b101 H
0$
#9
1$
#10
b0 '
b0 E
b0 O
b0 (
b0 D
b0 J
02
bx 4
bx N
bx ,
bx B
bx -
bx F
b110 +
b110 G
b110 H
0$
#11
1$
#12
b111 +
b111 G
b111 H
0$
#13
1$
1&
#14
b1000 +
b1000 G
b1000 H
0$
#15
1$
#16
b1001 +
b1001 G
b1001 H
0$
#17
1$
